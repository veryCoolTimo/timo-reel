import React, { forwardRef, useRef, useState, useEffect } from 'react'
import VideoOverlay from './VideoOverlay'
import ReactionButtons from './ReactionButtons'
import '../styles/VideoPlayer.css'

const VideoPlayer = forwardRef(({ video, isActive, onReaction, userId }, ref) => {
  const videoRef = useRef(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [isMuted, setIsMuted] = useState(true)
  const [showControls, setShowControls] = useState(false)

  // –ü–µ—Ä–µ–¥–∞–µ–º ref –Ω–∞—Ä—É–∂—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
  React.useImperativeHandle(ref, () => ({
    play: () => {
      if (videoRef.current) {
        videoRef.current.play()
        setIsPlaying(true)
      }
    },
    pause: () => {
      if (videoRef.current) {
        videoRef.current.pause()
        setIsPlaying(false)
      }
    }
  }))

  useEffect(() => {
    const video = videoRef.current
    if (!video) return

    const handlePlay = () => setIsPlaying(true)
    const handlePause = () => setIsPlaying(false)
    const handleEnded = () => setIsPlaying(false)

    video.addEventListener('play', handlePlay)
    video.addEventListener('pause', handlePause)
    video.addEventListener('ended', handleEnded)

    return () => {
      video.removeEventListener('play', handlePlay)
      video.removeEventListener('pause', handlePause)
      video.removeEventListener('ended', handleEnded)
    }
  }, [])

  const handleVideoClick = () => {
    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause()
      } else {
        videoRef.current.play()
      }
    }
  }

  const handleMuteToggle = () => {
    if (videoRef.current) {
      videoRef.current.muted = !isMuted
      setIsMuted(!isMuted)
    }
  }

  const handleControlsToggle = () => {
    setShowControls(!showControls)
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    if (!showControls) {
      setTimeout(() => setShowControls(false), 3000)
    }
  }

  const formatTime = (timestamp) => {
    const date = new Date(timestamp * 1000)
    const now = new Date()
    const diff = now - date
    
    const minutes = Math.floor(diff / 60000)
    const hours = Math.floor(diff / 3600000)
    const days = Math.floor(diff / 86400000)
    
    if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`
    if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ'
  }

  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder –≤–∏–¥–µ–æ
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç URL –≤–∏–¥–µ–æ –∏–∑ Telegram
  const videoUrl = `https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4`

  return (
    <div className="video-player">
      <div className="video-wrapper" onClick={handleVideoClick}>
        <video
          ref={videoRef}
          className="video-element"
          src={videoUrl}
          loop
          muted={isMuted}
          playsInline
          preload="metadata"
        />
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
        {!isPlaying && (
          <div className="play-indicator">
            <div className="play-button">‚ñ∂</div>
          </div>
        )}
        
        {/* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π */}
        <div className="video-gradient" />
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ */}
      <VideoOverlay
        username={video.username}
        timestamp={formatTime(video.timestamp)}
        isVisible={true}
      />

      {/* –ö–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π */}
      <ReactionButtons
        fileId={video.file_id}
        onReaction={onReaction}
        userId={userId}
      />

      {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã –∑–≤—É–∫–∞ */}
      <div className="audio-controls">
        <button 
          className={`mute-button ${isMuted ? 'muted' : 'unmuted'}`}
          onClick={handleMuteToggle}
          aria-label={isMuted ? '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : '–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
        >
          {isMuted ? 'üîá' : 'üîä'}
        </button>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Ç–∞–ø—É) */}
      {showControls && (
        <div className="video-controls">
          <div className="controls-overlay">
            <button onClick={handleControlsToggle} className="close-controls">
              ‚úï
            </button>
            <div className="video-info">
              <p>–í–∏–¥–µ–æ –æ—Ç @{video.username}</p>
              <p>{formatTime(video.timestamp)}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  )
})

VideoPlayer.displayName = 'VideoPlayer'

export default VideoPlayer 