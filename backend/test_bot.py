#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π TimoReel Bot
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(__file__))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from utils.config import BOT_TOKEN, MAX_VIDEO_SIZE
        print("‚úÖ utils.config - OK")
    except Exception as e:
        print(f"‚ùå utils.config - ERROR: {e}")
        return False
    
    try:
        from utils.cache import load_metadata, save_metadata
        print("‚úÖ utils.cache - OK")
    except Exception as e:
        print(f"‚ùå utils.cache - ERROR: {e}")
        return False
    
    try:
        from downloader.video_downloader import downloader
        print("‚úÖ downloader.video_downloader - OK")
    except Exception as e:
        print(f"‚ùå downloader.video_downloader - ERROR: {e}")
        return False
    
    try:
        from handlers.link_handler import extract_urls_from_text
        print("‚úÖ handlers.link_handler - OK")
    except Exception as e:
        print(f"‚ùå handlers.link_handler - ERROR: {e}")
        return False
    
    try:
        from handlers.pm_commands import mute_command
        print("‚úÖ handlers.pm_commands - OK")
    except Exception as e:
        print(f"‚ùå handlers.pm_commands - ERROR: {e}")
        return False
    
    try:
        from handlers.webapp_handler import create_webapp
        print("‚úÖ handlers.webapp_handler - OK")
    except Exception as e:
        print(f"‚ùå handlers.webapp_handler - ERROR: {e}")
        return False
    
    return True

def test_url_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL...")
    
    from handlers.link_handler import extract_urls_from_text
    
    test_cases = [
        "–ü–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ –≤–∏–¥–µ–æ: https://instagram.com/p/ABC123/",
        "–ö—Ä—É—Ç–æ–π TikTok https://vm.tiktok.com/ZMjKpQrSt/",
        "https://www.tiktok.com/@user/video/1234567890",
        "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫",
        "–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫: https://instagram.com/reel/XYZ/ –∏ https://tiktok.com/@test/video/999"
    ]
    
    for i, text in enumerate(test_cases, 1):
        urls = extract_urls_from_text(text)
        print(f"–¢–µ—Å—Ç {i}: {len(urls)} URL –Ω–∞–π–¥–µ–Ω–æ")
        for url in urls:
            print(f"  - {url}")
    
    return True

def test_video_downloader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    print("\nüìπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –≤–∏–¥–µ–æ...")
    
    from downloader.video_downloader import downloader
    
    test_urls = [
        "https://instagram.com/p/test/",
        "https://tiktok.com/@user/video/123",
        "https://youtube.com/watch?v=test",  # –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        "https://example.com/video.mp4"     # –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    ]
    
    for url in test_urls:
        is_supported = downloader.is_supported_url(url)
        print(f"URL: {url}")
        print(f"  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {'‚úÖ' if is_supported else '‚ùå'}")
    
    return True

def test_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞...")
    
    from utils.cache import load_metadata, save_metadata, add_video_metadata, add_reaction
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = load_metadata()
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {len(metadata.get('videos', {}))} –≤–∏–¥–µ–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ)
    print("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ - OK")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    add_reaction(999999, "test_video_id", "like")
    print("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ - OK")
    
    return True

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    from utils.config import BOT_TOKEN, MAX_VIDEO_SIZE, HOST, PORT
    
    print(f"BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
    print(f"MAX_VIDEO_SIZE: {MAX_VIDEO_SIZE // (1024*1024)}MB")
    print(f"HOST: {HOST}")
    print(f"PORT: {PORT}")
    print(f"API PORT: {PORT + 1}")
    
    if not BOT_TOKEN:
        print("‚ö†Ô∏è  –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    return True

def test_api_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è API...")
    
    try:
        import asyncio
        from handlers.webapp_handler import create_webapp
        
        async def test_webapp():
            app = await create_webapp()
            return app is not None
        
        result = asyncio.run(test_webapp())
        if result:
            print("‚úÖ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TimoReel Bot\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL", test_url_extraction),
        ("–ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ", test_video_downloader),
        ("–°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∞", test_cache),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–°–æ–∑–¥–∞–Ω–∏–µ API", test_api_creation),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - PASSED\n")
            else:
                print(f"‚ùå {test_name} - FAILED\n")
        except Exception as e:
            print(f"‚ùå {test_name} - ERROR: {e}\n")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: python bot.py")
        print("2. –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞: python api_server.py")
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: python test_api.py")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 