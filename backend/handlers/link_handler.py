import re
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from downloader.video_downloader import downloader
from utils.cache import add_video_metadata

logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
URL_PATTERNS = [
    # Instagram
    r'https?://(?:www\.)?instagram\.com/(?:p|reel|tv)/([A-Za-z0-9_-]+)/?',
    r'https?://(?:www\.)?instagram\.com/stories/[^/]+/(\d+)/?',
    
    # TikTok
    r'https?://(?:www\.)?tiktok\.com/@[^/]+/video/(\d+)',
    r'https?://(?:vm|vt)\.tiktok\.com/([A-Za-z0-9]+)/?',
    r'https?://(?:www\.)?tiktok\.com/t/([A-Za-z0-9]+)/?',
]

def extract_urls_from_text(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    urls = []
    
    for pattern in URL_PATTERNS:
        matches = re.finditer(pattern, text, re.IGNORECASE)
        for match in matches:
            urls.append(match.group(0))
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º –ª—é–±—ã–µ URL, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
    general_url_pattern = r'https?://[^\s]+'
    general_matches = re.finditer(general_url_pattern, text, re.IGNORECASE)
    
    for match in general_matches:
        url = match.group(0)
        if downloader.is_supported_url(url) and url not in urls:
            urls.append(url)
    
    return urls

async def handle_message_with_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
    if not update.message or not update.message.text:
        return
    
    message = update.message
    chat_id = message.chat_id
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    urls = extract_urls_from_text(message.text)
    
    if not urls:
        return
    
    logger.info(f"Found {len(urls)} video URLs in message from user {user_id}")
    
    for url in urls:
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_VIDEO)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = downloader.extract_info(url)
            if not video_info:
                logger.warning(f"Could not extract info from URL: {url}")
                continue
            
            logger.info(f"Downloading video: {video_info['title']} from {url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video_path = downloader.download_video(url)
            if not video_path:
                await message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ {url}\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                )
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç
                with open(video_path, 'rb') as video_file:
                    sent_message = await context.bot.send_video(
                        chat_id=chat_id,
                        video=video_file,
                        caption=f"üé¨ {video_info['title']}\nüë§ @{username}",
                        reply_to_message_id=message.message_id
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if sent_message.video:
                    file_id = sent_message.video.file_id
                    add_video_metadata(
                        file_id=file_id,
                        chat_id=chat_id,
                        user_id=user_id,
                        username=username
                    )
                    logger.info(f"Video saved with file_id: {file_id}")
                
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                downloader.cleanup_file(video_path)
                
        except Exception as e:
            logger.error(f"Error processing URL {url}: {e}")
            await message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ –∏–∑ {url}"
            )

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫"""
    await handle_message_with_links(update, context) 