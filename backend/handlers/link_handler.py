import re
import logging
from urllib.parse import urlparse, parse_qs
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from downloader.video_downloader import downloader
from utils.cache import add_video_metadata

logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
URL_PATTERNS = [
    # Instagram
    r'https?://(?:www\.)?instagram\.com/(?:p|reel|tv)/([A-Za-z0-9_-]+)/?',
    r'https?://(?:www\.)?instagram\.com/stories/[^/]+/(\d+)/?',
    
    # TikTok
    r'https?://(?:www\.)?tiktok\.com/@[^/]+/video/(\d+)',
    r'https?://(?:vm|vt)\.tiktok\.com/([A-Za-z0-9]+)/?',
    r'https?://(?:www\.)?tiktok\.com/t/([A-Za-z0-9]+)/?',
]

def normalize_url(url: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL, —É–±–∏—Ä–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã"""
    try:
        parsed = urlparse(url)
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        normalized = f"{parsed.scheme}://{parsed.netloc}{parsed.path}"
        # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if normalized.endswith('/'):
            normalized = normalized[:-1]
        return normalized
    except:
        return url

def extract_urls_from_text(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π"""
    urls = []
    normalized_urls = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
    
    for pattern in URL_PATTERNS:
        matches = re.finditer(pattern, text, re.IGNORECASE)
        for match in matches:
            url = match.group(0)
            normalized = normalize_url(url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏ —Ç–∞–∫–æ–π URL
            if normalized not in normalized_urls:
                urls.append(url)
                normalized_urls.add(normalized)
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º –ª—é–±—ã–µ URL, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
    general_url_pattern = r'https?://[^\s]+'
    general_matches = re.finditer(general_url_pattern, text, re.IGNORECASE)
    
    for match in general_matches:
        url = match.group(0)
        normalized = normalize_url(url)
        
        if (downloader.is_supported_url(url) and 
            normalized not in normalized_urls):
            urls.append(url)
            normalized_urls.add(normalized)
    
    return urls

async def handle_message_with_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
    if not update.message or not update.message.text:
        return
    
    message = update.message
    chat_id = message.chat_id
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
    urls = extract_urls_from_text(message.text)
    
    if not urls:
        return
    
    logger.info(f"Found {len(urls)} unique video URLs in message from user {user_id}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º URL
    processed_urls = set()
    
    for url in urls:
        normalized_url = normalize_url(url)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —Ç–∞–∫–æ–π URL
        if normalized_url in processed_urls:
            logger.info(f"Skipping duplicate URL: {url}")
            continue
        
        processed_urls.add(normalized_url)
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_VIDEO)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = downloader.extract_info(url)
            if not video_info:
                logger.warning(f"Could not extract info from URL: {url}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                if 'instagram.com' in url:
                    error_msg = (
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram\n\n"
                        f"üîí –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ\n"
                        f"‚Ä¢ Instagram –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã\n"
                        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞\n\n"
                        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–∏–¥–µ–æ –ø—É–±–ª–∏—á–Ω–æ–µ\n"
                        f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É\n"
                        f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
                    )
                elif 'tiktok.com' in url or 'vm.tiktok.com' in url:
                    error_msg = (
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ TikTok\n\n"
                        f"üîí –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ\n"
                        f"‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
                        f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ TikTok\n\n"
                        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
                    )
                else:
                    error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ {url}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É"
                
                await message.reply_text(error_msg)
                continue
            
            logger.info(f"Downloading video: {video_info['title']} from {url}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            status_message = await message.reply_text(
                f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...\n"
                f"üìπ {video_info['title'][:50]}{'...' if len(video_info['title']) > 50 else ''}\n"
                f"üë§ {video_info['uploader']}"
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video_path = downloader.download_video(url)
            if not video_path:
                await status_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n\n"
                    f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    f"‚Ä¢ –í–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB\n"
                    f"‚Ä¢ –°—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏ –ø—É–±–ª–∏—á–Ω–∞—è\n"
                    f"‚Ä¢ –í–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
                )
                continue
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç
                with open(video_path, 'rb') as video_file:
                    sent_message = await context.bot.send_video(
                        chat_id=chat_id,
                        video=video_file,
                        caption=f"üé¨ {video_info['title']}\nüë§ @{username}",
                        reply_to_message_id=message.message_id,
                        supports_streaming=True
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_message.delete()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if sent_message.video:
                    file_id = sent_message.video.file_id
                    add_video_metadata(
                        file_id=file_id,
                        chat_id=chat_id,
                        user_id=user_id,
                        username=username
                    )
                    logger.info(f"Video saved with file_id: {file_id}")
                
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                downloader.cleanup_file(video_path)
                
        except Exception as e:
            logger.error(f"Error processing URL {url}: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "File too large" in str(e) or "too large" in str(e).lower():
                error_msg = (
                    f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>50MB)\n\n"
                    f"üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram:\n"
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n"
                    f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
                )
            elif "Network" in str(e) or "timeout" in str(e).lower():
                error_msg = (
                    f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é\n\n"
                    f"üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                    f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"
                )
            else:
                error_msg = (
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ\n\n"
                    f"üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É\n"
                    f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É"
                )
            
            await message.reply_text(error_msg)

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫"""
    await handle_message_with_links(update, context) 