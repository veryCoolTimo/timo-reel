#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
"""

import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from utils.config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø TimoReel –±–æ—Ç!\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
        "‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!\n"
        "‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üÜò –ü–æ–º–æ—â—å –ø–æ TimoReel Bot\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
        "/test - —Ç–µ—Å—Ç –±–æ—Ç–∞\n\n"
        "üìù –§—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ Instagram –∏ TikTok\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!"
    )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user = update.effective_user
    chat = update.effective_chat
    
    await update.message.reply_text(
        f"üß™ –¢–µ—Å—Ç –±–æ—Ç–∞\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})\n"
        f"üí¨ –ß–∞—Ç: {chat.title or '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
        f"üÜî Chat ID: {chat.id}\n"
        f"üÜî User ID: {user.id}\n\n"
        f"‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
    )

async def echo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠—Ö–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏
    if 'instagram.com' in text or 'tiktok.com' in text or 'vm.tiktok.com' in text:
        await update.message.reply_text(
            "üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ!\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n"
            "–≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö."
        )
    else:
        await update.message.reply_text(
            f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram –∏–ª–∏ TikTok –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ!"
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting Simple TimoReel Bot...")
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_message))
    
    logger.info("‚úÖ Bot handlers configured")
    logger.info("üîÑ Starting polling...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    async with application:
        await application.start()
        await application.updater.start_polling(drop_pending_updates=True)
        
        logger.info("üéâ Bot started successfully!")
        logger.info("üì± Send /start to the bot to test it")
        logger.info("üõë Press Ctrl+C to stop")
        
        try:
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë Bot stopped by user")
        finally:
            await application.updater.stop()
            await application.stop()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Goodbye!")
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        import traceback
        traceback.print_exc() 