#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Instagram –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
"""

import logging
import sys
import time
import random
from downloader.instagram_fix import (
    get_server_specific_config,
    get_fallback_options,
    add_delay_between_requests,
    log_instagram_error
)
import yt_dlp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_with_config(url: str, config: dict, config_name: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç URL —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    logger.info(f"üîÑ Testing {config_name}...")
    
    try:
        with yt_dlp.YoutubeDL(config) as ydl:
            logger.info(f"  User-Agent: {config.get('http_headers', {}).get('User-Agent', 'Unknown')[:80]}...")
            logger.info(f"  Timeout: {config.get('socket_timeout', 'default')}s")
            logger.info(f"  Retries: {config.get('retries', 'default')}")
            logger.info(f"  Sleep interval: {config.get('sleep_interval', 'default')}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            delay = config.get('sleep_interval', random.uniform(5, 10))
            if isinstance(delay, (int, float)):
                wait_time = delay
            else:
                wait_time = random.uniform(5, 10)
            
            logger.info(f"  Waiting {wait_time:.1f} seconds before request...")
            time.sleep(wait_time)
            
            info = ydl.extract_info(url, download=False)
            if info:
                logger.info(f"‚úÖ {config_name} SUCCESS!")
                logger.info(f"  Title: {info.get('title', 'Unknown')}")
                logger.info(f"  Uploader: {info.get('uploader', 'Unknown')}")
                logger.info(f"  Duration: {info.get('duration', 0)} seconds")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è {config_name} returned empty info")
                return False
                
    except Exception as e:
        error_msg = str(e)
        logger.error(f"‚ùå {config_name} FAILED: {error_msg}")
        log_instagram_error(url, f"{config_name}: {error_msg}")
        return False

def test_progressive_instagram(url: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Instagram —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    logger.info(f"üéØ Testing Instagram URL: {url}")
    logger.info("üìä Using progressive configuration approach...")
    
    # 1. –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("\n=== Phase 1: Server-specific configuration ===")
    server_config = get_server_specific_config()
    server_config.update({
        'quiet': True,
        'no_warnings': True,
        'extract_flat': False,
    })
    
    if test_with_config(url, server_config, "Server Config"):
        return True
    
    # 2. –ü—Ä–æ–±—É–µ–º fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("\n=== Phase 2: Fallback configurations ===")
    fallback_configs = get_fallback_options()
    
    for i, config in enumerate(fallback_configs, 1):
        config.update({
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
        })
        
        if test_with_config(url, config, f"Fallback Config {i}"):
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É fallback –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if i < len(fallback_configs):
            wait_time = random.uniform(30, 60)
            logger.info(f"‚è≥ Waiting {wait_time:.1f} seconds before next attempt...")
            time.sleep(wait_time)
    
    # 3. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    logger.info("\n=== Phase 3: Maximum stealth mode ===")
    stealth_config = get_server_specific_config()
    stealth_config.update({
        'socket_timeout': 300,
        'retries': 50,
        'sleep_interval': random.uniform(60, 120),
        'max_sleep_interval': 180,
        'quiet': True,
        'no_warnings': True,
        'extract_flat': False,
        'prefer_insecure': True,
        'no_check_certificate': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Cache-Control': 'max-age=0',
            'DNT': '1',
            'Upgrade-Insecure-Requests': '1',
        }
    })
    
    if test_with_config(url, stealth_config, "Maximum Stealth"):
        return True
    
    logger.error("‚ùå All configuration attempts failed")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    logger.info("Instagram Server Test Tool")
    logger.info("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL (–ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö)
    test_urls = [
        "https://www.instagram.com/p/CwxYzNvgzaB/",
        "https://www.instagram.com/reel/C8J2K3LgzaB/",  # –î—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä
    ]
    
    success_count = 0
    total_tests = len(test_urls)
    
    for i, url in enumerate(test_urls, 1):
        logger.info(f"\n{'='*20} TEST {i}/{total_tests} {'='*20}")
        
        if test_progressive_instagram(url):
            success_count += 1
            logger.info(f"‚úÖ Test {i} PASSED - Instagram working!")
            break  # –ï—Å–ª–∏ –æ–¥–∏–Ω URL —Ä–∞–±–æ—Ç–∞–µ—Ç, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        else:
            logger.error(f"‚ùå Test {i} FAILED")
            
            if i < total_tests:
                wait_time = random.uniform(120, 180)  # 2-3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ URL
                logger.info(f"‚è≥ Waiting {wait_time:.1f} seconds before next URL...")
                time.sleep(wait_time)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n" + "=" * 50)
    logger.info(f"Server Test Results: {success_count}/{total_tests} successful")
    
    if success_count > 0:
        logger.info("‚úÖ Instagram integration working on server!")
        logger.info("üéâ Your bot should now be able to download Instagram videos")
        logger.info("\nNext steps:")
        logger.info("1. Restart your bot: python run_background.py restart")
        logger.info("2. Test with real Instagram URL in Telegram")
        logger.info("3. Monitor logs: tail -f logs/bot.log")
    else:
        logger.error("‚ùå Instagram still not working on server")
        logger.info("\nRecommendations:")
        logger.info("1. üåê Consider using proxy servers")
        logger.info("2. üîÑ Try different server location/provider")
        logger.info("3. ‚è∞ Wait 1-2 hours and try again")
        logger.info("4. üõ°Ô∏è Use VPN on server")
        logger.info("5. üìß Contact your VPS provider about IP reputation")
    
    return success_count > 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 