#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Instagram
"""

import sys
import os
import logging
from downloader.video_downloader import VideoDownloader
import yt_dlp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_yt_dlp_direct(url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ yt-dlp"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ yt-dlp –¥–ª—è: {url}")
    
    opts = {
        'quiet': False,
        'verbose': True,
        'extract_flat': False,
        'no_warnings': False,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
    }
    
    try:
        with yt_dlp.YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=False)
            print(f"‚úÖ Extraction successful!")
            print(f"   Title: {info.get('title', 'N/A')}")
            print(f"   Duration: {info.get('duration', 'N/A')} seconds")
            print(f"   Uploader: {info.get('uploader', 'N/A')}")
            print(f"   Filesize: {info.get('filesize', 'N/A')} bytes")
            print(f"   Format: {info.get('ext', 'N/A')}")
            return True
    except Exception as e:
        print(f"‚ùå Direct yt-dlp failed: {e}")
        return False

def test_video_downloader(url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—à VideoDownloader"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VideoDownloader –¥–ª—è: {url}")
    
    downloader = VideoDownloader()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ URL
    if not downloader.is_supported_url(url):
        print(f"‚ùå URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {url}")
        return False
    
    print("‚úÖ URL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    info = downloader.extract_info(url)
    if info:
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
        for key, value in info.items():
            print(f"   {key}: {value}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
    print("‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
    try:
        file_path = downloader.download_video(url)
        if file_path:
            file_size = os.path.getsize(file_path)
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path}")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} bytes")
            
            # –û—á–∏—Å—Ç–∫–∞
            downloader.cleanup_file(file_path)
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            return True
        else:
            print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return False

def print_system_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"   Python: {sys.version}")
    print(f"   OS: {os.name}")
    print(f"   Current directory: {os.getcwd()}")
    
    try:
        import yt_dlp
        print(f"   yt-dlp version: {yt_dlp.version.__version__}")
    except:
        print("   yt-dlp version: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")

def main():
    print("üß™ TimoReel Instagram Download Diagnostic")
    print("=" * 50)
    
    print_system_info()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
    test_urls = [
        "https://www.instagram.com/reel/test",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ]
    
    if len(sys.argv) > 1:
        test_urls = [sys.argv[1]]
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ URL: {sys.argv[1]}")
    else:
        print("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_instagram_download.py <instagram_url>")
        print("üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö URL")
        return
    
    for url in test_urls:
        if not url or url == "https://www.instagram.com/reel/test":
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π URL: {url}")
            continue
            
        print(f"\n" + "=" * 80)
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {url}")
        print("=" * 80)
        
        # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π yt-dlp
        success1 = test_yt_dlp_direct(url)
        
        # –¢–µ—Å—Ç 2: –ù–∞—à VideoDownloader
        success2 = test_video_downloader(url)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {url}:")
        print(f"   –ü—Ä—è–º–æ–π yt-dlp: {'‚úÖ SUCCESS' if success1 else '‚ùå FAILED'}")
        print(f"   VideoDownloader: {'‚úÖ SUCCESS' if success2 else '‚ùå FAILED'}")

if __name__ == "__main__":
    main() 