#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API TimoReel
"""

import asyncio
import aiohttp
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(__file__))

from utils.config import HOST, PORT

# URL API —Å–µ—Ä–≤–µ—Ä–∞
API_BASE_URL = f"http://{HOST}:{PORT + 1}/api"

async def test_health_check():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health check endpoint"""
    print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Health check OK: {data}")
                    return True
                else:
                    print(f"‚ùå Health check failed: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

async def test_stats_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ stats endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/stats") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Stats OK:")
                    stats = data.get('stats', {})
                    for key, value in stats.items():
                        print(f"  {key}: {value}")
                    return True
                else:
                    print(f"‚ùå Stats failed: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Stats error: {e}")
        return False

async def test_feed_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –ª–µ–Ω—Ç—ã –≤–∏–¥–µ–æ"""
    print("\nüìπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ feed endpoint...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ chat_id
    test_chat_ids = [123456789, -1001234567890, 999999999]
    
    for chat_id in test_chat_ids:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{API_BASE_URL}/feed?chat_id={chat_id}") as response:
                    if response.status == 200:
                        data = await response.json()
                        video_count = data.get('total', 0)
                        print(f"‚úÖ Feed for chat {chat_id}: {video_count} videos")
                    else:
                        print(f"‚ùå Feed failed for chat {chat_id}: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Feed error for chat {chat_id}: {e}")
            return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ chat_id (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/feed") as response:
                if response.status == 400:
                    print("‚úÖ Feed correctly rejects missing chat_id")
                else:
                    print(f"‚ùå Feed should reject missing chat_id, got {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Feed error testing missing chat_id: {e}")
        return False
    
    return True

async def test_reaction_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint —Ä–µ–∞–∫—Ü–∏–π"""
    print("\n‚ù§Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reaction endpoint...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_reactions = [
        {"user_id": 123456789, "file_id": "test_file_1", "type": "like"},
        {"user_id": 987654321, "file_id": "test_file_2", "type": "comment"},
    ]
    
    for reaction in test_reactions:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{API_BASE_URL}/react",
                    json=reaction,
                    headers={'Content-Type': 'application/json'}
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ Reaction added: {reaction['type']} from user {reaction['user_id']}")
                    else:
                        print(f"‚ùå Reaction failed: {response.status}")
                        text = await response.text()
                        print(f"   Response: {text}")
                        return False
        except Exception as e:
            print(f"‚ùå Reaction error: {e}")
            return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    invalid_reactions = [
        {},  # –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        {"user_id": "invalid", "file_id": "test", "type": "like"},  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
        {"user_id": 123, "file_id": "test", "type": "invalid"},  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π type
    ]
    
    for invalid_reaction in invalid_reactions:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{API_BASE_URL}/react",
                    json=invalid_reaction,
                    headers={'Content-Type': 'application/json'}
                ) as response:
                    if response.status == 400:
                        print(f"‚úÖ Correctly rejected invalid reaction: {invalid_reaction}")
                    else:
                        print(f"‚ùå Should reject invalid reaction: {invalid_reaction}")
                        return False
        except Exception as e:
            print(f"‚ùå Error testing invalid reaction: {e}")
            return False
    
    return True

async def test_video_info_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    print("\nüé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ video info endpoint...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º file_id
    test_file_id = "nonexistent_file_id"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/video/{test_file_id}") as response:
                if response.status == 404:
                    print(f"‚úÖ Correctly returned 404 for nonexistent video")
                    return True
                else:
                    print(f"‚ùå Should return 404 for nonexistent video, got {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Video info error: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TimoReel API\n")
    print(f"API URL: {API_BASE_URL}")
    
    tests = [
        ("Health Check", test_health_check),
        ("Stats Endpoint", test_stats_endpoint),
        ("Feed Endpoint", test_feed_endpoint),
        ("Reaction Endpoint", test_reaction_endpoint),
        ("Video Info Endpoint", test_video_info_endpoint),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name} - PASSED\n")
            else:
                print(f"‚ùå {test_name} - FAILED\n")
        except Exception as e:
            print(f"‚ùå {test_name} - ERROR: {e}\n")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã API –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python api_server.py")
        return False

if __name__ == '__main__':
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1) 