#!/usr/bin/env python3
"""
TimoReel System Launcher
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ API —Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from utils.config import BOT_TOKEN
from bot import create_application
from api_server import create_api_app
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/.env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        logger.error("BOT_TOKEN=your_telegram_bot_token_here")
        logger.error("")
        logger.error("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram:")
        logger.error("1. –ù–∞–ø–∏—à–∏—Ç–µ /newbot")
        logger.error("2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏ username –¥–ª—è –±–æ—Ç–∞")
        logger.error("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    storage_dir = Path(__file__).parent / "storage"
    storage_dir.mkdir(exist_ok=True)
    
    return True

async def start_api_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä"""
    try:
        app = create_api_app()
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', 8001)
        await site.start()
        
        logger.info("‚úÖ API Server started on http://0.0.0.0:8001")
        return runner
    except Exception as e:
        logger.error(f"‚ùå Failed to start API server: {e}")
        raise

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    try:
        application = create_application()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("‚úÖ Starting Telegram Bot with polling...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling(
            allowed_updates=['message', 'callback_query'],
            drop_pending_updates=True
        )
        
        logger.info("‚úÖ Telegram Bot started successfully!")
        return application
    except Exception as e:
        logger.error(f"‚ùå Failed to start Telegram bot: {e}")
        raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ Starting TimoReel System...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
        api_runner = await start_api_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        bot_app = await start_telegram_bot()
        
        logger.info("üéâ TimoReel System started successfully!")
        logger.info("üì± Bot is ready to receive messages")
        logger.info("üåê API Server: http://localhost:8001")
        logger.info("üé¨ WebApp: http://localhost:3000 (run 'npm run dev' in webapp/)")
        logger.info("")
        logger.info("Press Ctrl+C to stop...")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë Stopping TimoReel System...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            await bot_app.updater.stop()
            await bot_app.stop()
            await bot_app.shutdown()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
            await api_runner.cleanup()
            
            logger.info("‚úÖ TimoReel System stopped")
            
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Goodbye!")
    except Exception as e:
        logger.error(f"üí• System crashed: {e}")
        sys.exit(1) 